#!/usr/bin/env python3
"""Dotfiles management"""

import argparse
import configparser
import logging as log
import os
from pathlib import Path

import lib.dotfiles as dotfiles
import lib.scriptrunner as scriptrunner

# Set a restrictive default umask
os.umask(0o077)

dotfiles_dir = Path(os.path.dirname(os.path.realpath(__file__)))
default_ignore_list: list[str | Path] = []

_env_defaults: dict[str, Path] = {}

config = configparser.ConfigParser()
config.optionxform = str  # type: ignore
config.read(dotfiles_dir / "config.ini")

if config.has_section("env.fallbacks"):
    for key, value in config.items("env.fallbacks"):
        _env_defaults[key] = Path(value)


def main():
    df = dotfiles.Dotfiles(config, dotfiles_dir, _env_defaults, default_ignore_list)

    file_description = "a simple way to manage dotfiles."

    parentp = argparse.ArgumentParser(add_help=False)

    parentp.add_argument(
        "-v", "--verbose", action="store_true", help="Show more verbose output"
    )

    parser = argparse.ArgumentParser(parents=[parentp], description=file_description)

    subp = parser.add_subparsers(title="commands")

    # Setup parser for dotfiles install functionality
    dotfiles_install_parser = subp.add_parser(
        "install", help="Install all dotfiles", parents=[parentp]
    )
    dotfiles.argparser_setup(dotfiles_install_parser)
    dotfiles_install_parser.set_defaults(func=df.install)

    # Setup parser for script running functionality
    scriptrunner_parser = subp.add_parser(
        "run", help="Run a script from `$DOTFILES_DIR/scripts/`", parents=[parentp]
    )
    scriptrunner.argparser_setup(scriptrunner_parser)
    scriptrunner_parser.set_defaults(func=scriptrunner.run)

    args = parser.parse_args()

    log_format = "%(levelname)s: %(message)s"
    log_level = log.INFO if args.verbose else log.WARNING

    log.basicConfig(format=log_format, level=log_level)

    if "func" in args:
        try:
            args.func(args)
        except IOError:
            log.exception("Error processing dotfiles:")
            parser.exit(1)
    else:
        parser.print_usage()


if __name__ == "__main__":
    main()
